// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Location = sequelize.define('location', {
    id: {
      type: DataTypes.UUID,
      primaryKey: true,
      defaultValue: Sequelize.literal('uuid_generate_v4()'),
    },
    active: {
      type: DataTypes.BOOLEAN,
      defaultValue: Sequelize.literal('true'),
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    name: {
      type: DataTypes.STRING,
    },
    deliverooId: {
      type: DataTypes.STRING,
    },
    email: {
      type: DataTypes.STRING,
    },
    phone: {
      type: DataTypes.STRING,
    },
    deliveryInstructions: {
      type: DataTypes.STRING,
    },
    countryDiallingCode: {
      type: DataTypes.STRING,
    },
  }, {
    tableName: 'location',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Location.associate = (models) => {
    Location.belongsTo(models.address, {
      foreignKey: {
        name: 'addressIdKey',
        field: 'address_id',
      },
      as: 'address',
    });
    Location.belongsTo(models.company, {
      foreignKey: {
        name: 'companyIdKey',
        field: 'company_id',
      },
      as: 'company',
    });
    Location.hasMany(models.userlocation, {
      foreignKey: {
        name: 'locationIdKey',
        field: 'location_id',
      },
      as: 'userlocations',
    });
    Location.hasMany(models.order, {
      foreignKey: {
        name: 'locationIdKey',
        field: 'location_id',
      },
      as: 'orders',
    });
    Location.hasMany(models.locationsupplier, {
      foreignKey: {
        name: 'locationIdKey',
        field: 'location_id',
      },
      as: 'locationsuppliers',
    });
  };

  return Location;
};
